' Gambas module file

'
' este modulo gestiona los dispositivos empleados, y su uso,
' verifica si existe, despues los configura o enciende para empezar usarlos
'
' este modulo proporciona funciones de captura de imagenes de foto y dedo
' una funcion de enrolado y otra de verificado
'
' la funcion de enrolado solo agrega usuarios a la base de datos de listado
'
' la funcion de verificado agrega registros a la base de datos de registros diarios
'
' la gestion de los datos es aparte, esto modulo solo asume datos en el sistema de ficheros
' es decir, el modulo de DB tomara los datos desde el sistema de ficheros,
' en el modo verificar se saca los datos previamente y se coloca donde la libreria espera encontrarlos
' en cada proceso de operaciones, se invoca las llamadas al modulo de gestion de base de datos
'

Library "libfprint:0" ' uso de libreria externa aun en progreso

Private Extern fp_init() As Integer ' importacion de inicio de funciones de la lib figerprint
Private Extern fp_set_debug()       ' importacion de configuraciones de depurado
Private Extern fp_exit()            ' importacion de proceso para salir y limpiar la ram de relacionados con la libreria
Private Extern fp_discover_devs() As Pointer    ' funciones de descubrimiento de dispositivos
Private Extern fp_dscv_dev_get_driver(fp_dev As Pointer)    ' funciones de obtencion de info del dispositivo seleccionado

Private fp_dscv_dev As Pointer      ' TODO this its a double pointer.. get problems, must be use with VarPtr() but gambas3 cant do
Private fp_dscv_dev_dev As Pointer  ' abstraccion del pool de dispositivos para seleccionar uno
Private fp_driver As Pointer        ' abstraccion de la representacion del dispositivo, y sus capacidades especificas

Public hWebcam As VideoDevice       ' abstraccion del dispositivo de camara de video

Private hProcesamiento As Process   ' hilo en que se ejecutara el backend para atrapar los resultados que arroje
Private sSalida As String           ' variable en que esta el resultado arrojado por el proceso
Private LineaProcesamiento As String  ' esta contiene una linea a la vez de la salida escupida por el backend
Private LineasProcesamiento As String[] ' bufer de la salida del proceso para ser analizada liena por linea

Private scanerdedocmd As String     ' nombre del comando que escanea el dedo, segun el entorno
Private scanerdummycmd As String    ' agregado al comando si se detecta que no hay escaner y esta emulandolo

Private iscamerapresente As Boolean ' variable que indicara que hay una camara usable, si false revisar config o dispositivo dev
Private isscanerpresente As Boolean ' variable que indicara que hay un escaner de dedos, si false, posible este en modo emulado

Private isemuladoactivo As Boolean  ' si no hay escaner presente, modo emulado poner en true
Private isemuladocamara As Boolean  ' si no hay camara presente, modo dummy y no intentar tomar fotos

Public mcaptura_emu As Boolean      ' semaforo, o indicador si al no haber dispositivo entra en modo emulado (igual que isscanerpresente)
Public est_app_asis As Integer      ' semaforo, o interrupcion de salud del modulo, 0 listo, 1 se va invocar, 2 en pleno uso/verificando, 3 malo no hay backend

'' procesos de preparacion y gestion la camara de video, la verificamos, configuramos y encendemos, en caso no haya backend
Public Sub funcionando_camara()

    Dim tamanovideo As New String[]

    If IsNull(hWebCam) Then
        Try hWebCam = New VideoDevice(FMain.datos.getCamaraDev())
        If Error Then
            FMain.datos.setStatusCamara(False)
            Print "Error accediendo al dispositivo: " & Error.Text
            Message.Error(("Instale una camara valida linux, ademas debe ser solo una, revise la configuracion"))
            est_app_asis = 5 ' sin camara o camara mal asignada... 
            isemuladocamara = True ' TODO: se pone false en reinicio, este es el error
            Return
        Else
            FMain.datos.setStatusCamara(True)
            isemuladocamara = False
        Endif
    Endif

    hWebCam.Bright = 60
    hWebCam.Contrast = 200
    hWebCam.Whiteness = 150
    hWebCam.Hue = 0
    hWebCam.Color = 60

    tamanovideo = Split(FMain.datos.getCamaraSize(), "x")  ' de  la config leo una liena XXXxYYY ypico el string numerico en la x minuscula
    If tamanovideo.Max == 1 Then
        Try hWebcam.Resize(Val(tamanovideo[0]), Val(tamanovideo[1])) ' no verifico que los valores sean correctos aun
        If Error Then
            hWebcam.Resize(320, 240) ' si los valores no son correctos uso por defecto
        Endif
    Else
        hWebcam.Resize(320, 240) ' si el string esta mal formateado (menos o mas de dos elementos, uso por defecto
    Endif

    Wait 1 ' espero un poco a quela camara se inicialize, gambas tarda en maquinas pote
    FMain.pintarvideo.Delay = 10
    FMain.pintarvideo.Enabled = True ' enciendo un temporizador que pinta en cada pasada una foto y simula el video
    FMain.datos.setStatusCamara(True)
    
    ' en este puto todo fue bien, marco estado bueno del modulo en 0
    est_app_asis = 0

End

'' procesos de deteccion y preparacion del escaner, primero vemos si hay libreria, y despues si hay backend
Public Sub funcionando_escaner()

    Dim resultado_backend As String ' usado para obtener una config desde el programa backend
    Dim devlib As Integer           ' variable de resultado de inicio de la libreria
    Dim comd As String              ' comando a invocar, variable no perecedera
    Dim modoverificado As String    ' modo de verificado, por defecto ambos, si falla escaner solo cara
    
    devlib = fp_init() ' deteccion de si tenemos libfprint instalada, sino el programa a invocar fallara
    If (devlib < 0) Then
        Message.Error("Libreria de escaneo no instalada/detectada, instale libfprint para usar el backend con el escaner")
        est_app_asis = 3 ' sin liberia, el comando fallara
        FMain.datos.setStatusEscaner(False)
        Return          ' aun cuando el comando este, y se pueda usar la camara, sin la lib el comando fallara, y es necesario
    Else
        fp_exit() ' libreria esta, si puede invoco el linea de comandos
    Endif

    If IsNull(scanerdedocmd) Then
        setScanerdedoCmd("escanerdedo") ' nombre del comando para escanear el dedo, si no se configuro
    Endif

    comd = scanerdedocmd & "cmd" ' comando de produccion

    If Not Exist(comd) Then
        comd = scanerdedocmd  ' si no existe, estas en desarrollo?
        If Not Exist(comd) Then
            comd = User.Home & "/devel/simplecontrolasistencia/escanerdedo/escanerdedo"
            If Not Exist(comd) Then
                comd = scanerdedocmd & "cmd"  ' en ultima instancia tomo el ultimo compilado sin limpiar de aqui
                If Not Exist(comd) Then
                    Message.Error("El software de escaneo, no esta instalado, Si ud esta desarrollando deje la flojera y corra el codigo por pasos\n<br> el error esta en que debe compilar y colocarlo donde la linea de codigo que saca este mensage lo busca")
                    est_app_asis = 4 ' hay libreria de gestion de scaners, pero no hay comando backend
                    FMain.datos.setModoVerificado("cara")
                Else
                    Message.Error("El software de escaneo, no esta instalado, ¿se apago la maquina mal? ¿se instalo el software mal?")
                    est_app_asis = 4 ' hay libreria de gestion de scaners, pero no hay comando backend
                    FMain.datos.setModoVerificado("cara")
                Endif
            Endif
        Endif
    Else
        setScanerdedoCmd(comd) ' si el de produccion existe lo asigno
    Endif

    Shell comd & "  identify interfaz 2>&1 " To resultado_backend
    LineasProcesamiento = Split(resultado_backend, "\n")
    ' 0 = <nombre humano del escaner> ejemplo en modo dummy: Dummy/Falso Quien carizo eres tu finger/dedo scaner 0000
    ' 1 = <id numerico> : 0063 es dummy
    ' 2 = <tipo> : 00000063 es dummy
    ' 3 = rutafiledata =<HOME>/.fprint/prints/<rutadevice>/<dedo> generalemnte debe ser obviado en modo dummy
    ' 4 = nombreimagen = noencontrado.pgm o usuarioid.pgm
    If LineasProcesamiento.Length <= 2 Then
        Print " backend error " & LineasProcesamiento[0]
        Message.Error("El software de escaneo, esta dañado, ¿se apago la maquina mal? ¿se instalo el software mal?")
        est_app_asis = 3
    Else
        If Comp(LineasProcesamiento[1], "0063", 1) == 0 Then
            setModoEmulado(True)
            Shell " mkdir -p " & User.Home &/ LineasProcesamiento[3]    ' si es summy crear la base
        Else
            setModoEmulado(False)
        Endif
        Print "Empleando escaner " & LineasProcesamiento[0] & " usando ruta " & LineasProcesamiento[3]
        FMain.datos.setRutaFprintData(User.Home & "/" & LineasProcesamiento[3])
        FMain.datos.setStatusEscaner(True)
        FMain.datos.setModoVerificado("ambos")
        est_app_asis = 0
    Endif

End

'' verifica si el escaner sigue siendo el mismo que se detecto al arrancar la aplicacion o la ultima vez se uso, y si esta bueno
Public Sub verificar_escaner() As Boolean
    
    Dim resultado_backend As String ' usado para obtener una config desde el programa backend
    Dim modoverificado As String    ' modo de verificado, por defecto ambos, si falla escaner solo cara

    Shell scanerdedocmd & "  identify interfaz 2>&1 " To resultado_backend
    LineasProcesamiento = Split(resultado_backend, "\n")
    ' 0 = <nombre humano del escaner> ejemplo en modo dummy: Dummy/Falso Quien carizo eres tu finger/dedo scaner 0000
    ' 1 = <id numerico> : 0063 es dummy
    ' 2 = <tipo> : 00000063 es dummy
    ' 3 = rutafiledata =<HOME>/.fprint/prints/<rutadevice>/<dedo> generalemnte debe ser obviado en modo dummy
    ' 4 = nombreimagen = noencontrado.pgm o usuarioid.pgm
    If LineasProcesamiento.Length <= 2 Then
        Print " backend error " & LineasProcesamiento[0]
        Message.Error("El software de escaneo, esta dañado, ¿se apago la maquina mal? ¿se instalo el software mal?")
        setModoEmulado(True)
        est_app_asis = 3
        Return False
    Else
        If Comp(LineasProcesamiento[1], "0063", 1) == 0 Then
            setModoEmulado(True)
        Else
            setModoEmulado(False)
        Endif
        Print "Empleando escaner " & LineasProcesamiento[0] & " usando ruta " & LineasProcesamiento[3]
        FMain.datos.setRutaFprintData(User.Home & "/" & LineasProcesamiento[3])
        FMain.datos.setStatusEscaner(True)
        FMain.datos.setModoVerificado("ambos")
        est_app_asis = 0
        Return itsModoEmulado()
    Endif
End


'' verifica que el nodo de asistencia (servicio) este activo y funcionando, deveulve el ip del nodo segun config, sino el por defecto
Public Sub verificar_nodo() As String
    
    
    
End


'' proceso para escanear el dedo del esclav.. err trabajador, 
'' toma un id (usuario) con dedo 1 (pulgar izq), y null data de dedos.
'' se puede dejar sin especificar el dedo y datafinger, pero enonces
'' asumira modo emulado, datafinger es la data que se pasa desde DB con 
'' el dedo respectivo, dedo y datafingr deben ser de dedos asociados.

Public Sub scan_dedo_rostro(usuario As String, Optional dedo As Integer = 1, Optional datafinger As Variant = Null)

    Dim dbmanagdat As DBmandat
    Dim ramdi As Integer                ' usado para esconder la imagen

    Dim resultado_backend As String     ' usado para obtener una config desde el programa backend
    Dim resultado_dbmanat As Integer    ' usade para otener un estado de confirmacion de exito de la operacion en db
    Dim datadedocodif As String         ' usado para manejar la dada binaria del dedo escaneado
    Dim ruta_data_dactilar As String    ' la ruta de la data donde debe estar la huella dactilar
    Dim ruta_img_huella As String       ' la direccion del archivo cara imagen resultante
    Dim ruta_img_foto As String         ' la direccion del archivo huella imagen resultante
    Dim name_img_huella As String       ' el nombre de la huella, que sera el id usuario + aleatorio
    Dim name_img_foto As String         ' el nombre de la foto, que sera el id usuario
    Dim ruta As String                  ' ruta de trabajo de los datos, digitos y foto

    Dim hconn As Connection             ' conexcion a DB sqlite, offline, fault toleran

    Randomize CInteger(Val(Format$(Now, "ddmmyyyyhhnnss")))
    ramdi = Int(Rnd * 100000000)
    
    ' configuramos las rutas y nombres de fotos de cara y dedo
    name_img_foto = usuario & ".png"   ' configuro el nombre de la foto segun el usuario y una var aleatoria
    name_img_huella = usuario & ramdi & ".pgm"   ' configuro el nombre de la foto segun el usuario y una var aleatoria

    ' mandamos a pedir la ruta al backend, y la guardamos en una variable, alli trabajaremos
    Shell scanerdedocmd & " path interfaz 2>&1" To ruta ' nuestro backend esta hecho para que devuelva solo una linea

    ' armo la ruta y el ubicacion de la foto, pa mostrasela, auqnue leonardo se queje, y sea grotesco
    ruta_img_huella = User.Home & "/" & ruta & name_img_huella
    ruta_img_foto = User.Home & "/" & ruta & name_img_foto
    ruta_data_dactilar = User.Home & "/" & ruta & dedo
    Print " ruta img: " & ruta_img_foto & " ded img " & ruta_img_huella & " dactilar " & ruta_data_dactilar

    ' eliminamos cualquier archivo previo
    If Exist(ruta_img_foto) Then Kill ruta_img_foto
    If Exist(ruta_img_huella) Then Kill ruta_img_huella
    If Exist(ruta_data_dactilar) Then Kill ruta_data_dactilar
    
    FMain.mensageusuario.Text = "Registrado " & usuario
    FMain.inputficha.Hide
    FMain.mensageusuario.Show

    verificar_escaner
    Print scanerdedocmd & " interfaz enroll finger " & dedo & " image " & ruta_img_huella & scanerdummycmd & " 2>&1"
    Shell scanerdedocmd & " interfaz enroll finger " & dedo & " image " & ruta_img_huella & scanerdummycmd & " 2>&1" To resultado_backend
    Print resultado_backend
    LineasProcesamiento = Split(resultado_backend, "\n")
    ' 0 = nombreimagen=<ruta>/noencontrado.pgm
    ' 1 = rutafiledata =<HOME>/.fprint/prints/<rutadevice>/<dedo> obviado en modo dummy
    ' 2 = nombre = noencontrado.pgm
    ' 3 = status = TRUE, FALSE si esta en modo dummy
    ' 4 = salida = 0

    ' tomamos el tiempo para solo mostrar la fotico unos segundos
    FMain.setHoraAlEscanear
    FMain.tiempotranscurrido_imagenes.Start     ' iniciamos el contador, solo mostrara imagenes por 5 segundos
    ' cargamos los datos del usuario enrolado
    If itsModoEmulado() == False Then
        ' rescatamos y vemos la ruta de donde esta la data del dedo, la ruta ya  yo la habia preguntado
        'ruta_data_dactilar = User.Home & "/" & LineasProcesamiento[2]
        FMain.datos.setDataBlob(File.Load(ruta_data_dactilar))
        ' rescatamos y endosamos la data de la ruta que rescatamos
        datadedocodif = Base64(File.Load(ruta_data_dactilar))
        FMain.datos.setDataBlobCrypted(datadedocodif)
        ' cargamos la fotico del dedo en el GUI interfaz grafica al usuario
        FMain.img_dedo_mostrar.Picture = Picture[ruta_img_huella]
    Endif
    ' informamos de si fue enrolado/verificado correctamente por el backend
    FMain.datos.setStatusEnrolado(LineasProcesamiento[3])
    ' operacion exitosa, mostramos la foto pero no permitimos pulsar boton hasta que vea su huella
    FMain.img_dedo_mostrar.Show
    
    ' tiramos una fotico de la cara que pone el esclavo.. err digo trabajador
    If getCamera() <> Null Then
    getCamera().Save(ruta_img_foto)
    FMain.img_cara_mostrar.Picture = Picture[ruta_img_foto]
    Endif
    ' cargamos la fotico del rostro en el GUI interfaz grafica al usuario
    FMain.img_cara_mostrar.Show
    FMain.img_video_mostrar.Visible = False
    ' gestionamos hacia base de datos
    dbmanagdat = New DBmandat
    dbmanagdat.getConeccionDB()
    resultado_dbmanat = dbmanagdat.sys_enroll_user(usuario, FMain.datos.itsModoDirecto(), ruta_data_dactilar, FMain.datos.getDataBlob(), ruta_img_foto, Null, "COLOCAR_NOMBRE", "COLOCAR_APELLIDO")
    Print "proceso de enrolado termino con resultqado : " & resultado_dbmanat
    ' eliminamos rastro, dado ya tenemos la foto dactilar y el archivo, incluso encriptado
    Kill ruta_img_foto
    Kill ruta_img_huella
    Kill ruta_data_dactilar
    FMain.datos.setDataBlobCrypted(Null)
    Return

End


'' proceso para verificar el dedo del esclav.. err trabajador, 
'' toma un id (usuario) con dedo 1 (pulgar izq), y null data de dedos.
'' se puede dejar sin especificar el dedo y datafinger, pero enonces
'' asumira modo emulado, datafinger es la data que se pasa desde DB con 
'' el dedo respectivo, dedo y datafingr deben ser de dedos asociados.

Public Sub verif_dedo_rostro(usuario As String, Optional dedo As Integer = 1)

    Dim dbmanagdat As DBmandat
    Dim ramdi As Integer                ' usado para esconder la imagen

    Dim resultado_backend As String     ' usado para obtener una config desde el programa backend
    Dim resultado_dbmanat As Integer    ' usade para otener un estado de confirmacion de exito de la operacion en db
    Dim datadedocodif As Stream         ' usado para manejar la dada binaria del dedo escaneado
    Dim ruta_data_dactilar As String    ' la ruta de la data donde debe estar la huella dactilar
    Dim ruta_img_huella As String       ' la direccion del archivo cara imagen resultante
    Dim ruta_img_foto As String         ' la direccion del archivo huella imagen resultante
    Dim name_img_huella As String       ' el nombre de la huella, que sera el id usuario + aleatorio
    Dim name_img_foto As String         ' el nombre de la foto, que sera el id usuario
    Dim ruta As String                  ' ruta de trabajo de los datos, digitos y foto

    Dim hconn As Connection             ' conexcion a DB sqlite, offline, fault toleran
    Dim datos As String[]
    
    Dim verificado As String = ""       ' si esta vacio no se encontro id, false no paso el dactilar, true, puede trabajar
    Dim textcommon As String = ""       ' usado para algunas economias de codigo por alli, nada importante

    Randomize CInteger(Val(Format$(Now, "ddmmyyyyhhnnss")))
    ramdi = Int(Rnd * 100000000)
    
    ' configuramos las rutas y nombres de fotos de cara y dedo
    name_img_foto = usuario & ".png"   ' configuro el nombre de la foto segun el usuario y una var aleatoria
    name_img_huella = usuario & ramdi & ".pgm"   ' configuro el nombre de la foto segun el usuario y una var aleatoria

    ' mandamos a pedir la ruta al backend, y la guardamos en una variable, alli trabajaremos
    Shell scanerdedocmd & " path interfaz 2>&1" To ruta ' nuestro backend esta hecho para que devuelva solo una linea
    
    Shell "mkdir -p " & ruta
    ' armo la ruta y el ubicacion de la foto, pa mostrasela, auqnue leonardo se queje, y sea grotesco
    ruta_img_huella = User.Home & "/" & ruta & name_img_huella
    ruta_img_foto = User.Home & "/" & ruta & name_img_foto
    ruta_data_dactilar = User.Home & "/" & ruta & dedo
    Print " ruta img: " & ruta_img_foto & " ded img " & ruta_img_huella & " dactilar " & ruta_data_dactilar

    ' eliminamos cualquier archivo previo
    If Exist(ruta_img_foto) Then Kill ruta_img_foto
    If Exist(ruta_img_huella) Then Kill ruta_img_huella
    If Exist(ruta_data_dactilar) Then Kill ruta_data_dactilar
    
    dbmanagdat = New DBmandat
    hconn = dbmanagdat.getConeccionDB()
    ' TODO la funcion dbmanagdat.sys_verify_user(usuario, "1") rescata lso datos, en binaryo blob de base64, necesito saber como guardarlos
    Print " salvando " & ruta_data_dactilar
    FMain.mensageusuario.Text = "Verificando " & usuario
    FMain.mensageusuario.Enabled = True
    dbmanagdat.sys_verify_user(usuario, ruta_data_dactilar) ' exista o no huella, se ejecutara
    FMain.inputficha.Hide
    datos = dbmanagdat.sys_search_user(usuario, 0) ' si no existe usuario, devuelve vacios o nulos
    FMain.mensageusuario.Text = "ID invalido: el id/cedula ingresado no es valido.<br>Verifique e ingrese de nuevo o consulte su jefe inmediato.<br> Si su huella no haya sido registrada, pida sea registrada."
    If Not IsNull(datos) Then
        If Not (Comp(datos[1], "Invitado", 1) == 0) Then
            FMain.mensageusuario.Text = "Sr(a), " & datos[1] & ", <br><br>COLOQUE SU DEDO EN EL ESCANER justo DESPUES DE ESTAR ENCENDIDO para certificar su identidad"
            FMain.mensageusuario.Show
            FMain.panelidverificar.Hide
            Wait 1
        Endif
        Shell "sleep 7 && killall " & scanerdedocmd & " & " 
        Print scanerdedocmd & " interfaz verify finger " & dedo & " image " & ruta_img_huella & scanerdummycmd & " 2>&1"
        Shell scanerdedocmd & " interfaz verify finger " & dedo & " image " & ruta_img_huella & scanerdummycmd & " 2>&1" To resultado_backend
        Print resultado_backend
        LineasProcesamiento = Split(resultado_backend, "\n")
        ' 0 = nombreimagen=<ruta>/noencontrado.pgm
        ' 1 = rutafiledata =<HOME>/.fprint/prints/<rutadevice>/<dedo> obviado en modo dummy
        ' 2 = nombre = noencontrado.pgm
        ' 3 = status = TRUE, FALSE si esta en modo dummy
        ' 4 = salida = 0
    
        ' tomamos el tiempo para solo mostrar la fotico unos segundos
        FMain.setHoraAlEscanear
        FMain.tiempotranscurrido_imagenes.Start     ' iniciamos el contador, solo mostrara imagenes por 5 segundos
        ' verificamos "true" de dactilar, esto sucede sea emulado o no el modo del backend
        verificado = LineasProcesamiento[3]
        ' cargamos los datos del usuario enrolado
        If LineasProcesamiento.Count > 4 Then
            ' si no tengo 5 elementos no tengo salida == 0 o salida == 1
            If itsModoEmulado() == False Then
                If Exist(ruta_img_huella) Then
                    FMain.img_dedo_mostrar.Picture = Picture[ruta_img_huella]
                Endif
                If Val(verificado) > -1 And datos[2] <> "998" And datos[1] == "Invitado" Then
                    ruta_data_dactilar = User.Home & "/" & LineasProcesamiento[2]
                Else
                    If datos[2] == "998" And datos[1] == "Invitado" Then
                        verificado = -6
                    Endif
                Endif
            Endif
        Else
            ' TODO aqui poner logistica matar y liberar el escaner
            Shell scanerdedocmd & " path interfaz 2>&1" To ruta ' nuestro backend esta hecho para que devuelva solo una linea
            ' no puso el dedo en el escaner, notificamos y mostramos el mensage
            FMain.mensageusuario.Text = "Sr(a), " & datos[1] & ", por favor, VUELVA A INTENTARLO COLOCANDO SU DEDO EN EL ESCANER para certificar su identidad"
            FMain.mensageusuario.Show
        Endif
        ' informamos de si fue enrolado/verificado correctamente por el backend
        If LineasProcesamiento.Count > 4 Then
            If Val(verificado) > -1 Then
                FMain.datos.setStatusVerificado(LineasProcesamiento[3])
            Else
                If FMain.datos.itsAccessControlMode() Then
                    FMain.datos.setStatusVerificado(True)
                    If verificado == "-6" Then
                        verificado = "TRUE"
                    Endif
                Endif
            Endif
        Endif
        ' tiramos una fotico de la cara que pone el esclavo.. err digo trabajador
        If itsCameEmulado() == False Then
            If FMain.datos.itsAndandoCamara() == True Then
                FMain.img_cara_mostrar.Refresh
                getCamera().Save(ruta_img_foto)
            Endif
            If Exist(ruta_img_foto) Then
                FMain.img_cara_mostrar.Picture = Picture[ruta_img_foto]
            Else
                FMain.img_cara_mostrar.Picture = Null
            Endif
        Endif
        ' cargamos imagenes respectivas de los registrado
        FMain.img_dedo_mostrar.Show
        FMain.img_cara_mostrar.Show
        FMain.img_video_mostrar.Visible = False
    Else
        FMain.setHoraAlEscanear
        FMain.tiempotranscurrido_imagenes.Start     ' iniciamos el contador, solo mostrara imagenes por 5 segundos
    Endif
    FMain.panelidverificar.Hide

    ' gestionamos hacia base de datos
    If verificado == "TRUE" Then
        If Not IsNull(datos) Then
            If (Comp(datos[1], "Invitado", 1) == 0) Then
                textcommon = "Sr(a), Saludos, no lo he ubicado (o no esta aun) en nomina.<br><br>Invitado"
            Else
                textcommon = "Sr(a) " & datos[0] & "," & datos[1]
            Endif
        Else
            textcommon = "Sr(a), Saludos, dado no lo he ubicado en nomina, se creara registros de invitado:"
        Endif
            dbmanagdat = New DBmandat
            resultado_dbmanat = dbmanagdat.sys_writehistory_user(usuario, datos[2], Format$(Now, "hh"), Format$(Now, "nn"), ruta_img_foto, ruta_data_dactilar, ruta_img_foto)
            If resultado_dbmanat > 4 Or resultado_dbmanat < 0 Then
                FMain.mensageusuario.Text = textcommon & ", Ud ya marco el final de su dia laboral. No se le crearan mas registros de asistencias en adelante"
            Else
                If resultado_dbmanat == 1 Or resultado_dbmanat == 3 Then
                    FMain.mensageusuario.Text = textcommon & ", Ingreso registrado."
                Endif
                If resultado_dbmanat == 2 Then
                    FMain.mensageusuario.Text = textcommon & ", Salida o Descanso registrada."
                Endif
                If resultado_dbmanat == 4 Then
                    FMain.mensageusuario.Text = textcommon & ", Salida laboral final registrada."
                Endif
            Endif
            If Val(verificado) > -1 And resultado_dbmanat < 0 Then
                FMain.mensageusuario.Text = "No ha sido actualizado, no esta registrado en la nomina (aun) o no esta listado (aun)"
            Endif
    Endif
    If verificado == "FALSE" Then
        FMain.mensageusuario.Text = "Incorrecto: " & datos[1] & ".<br><br>Coloque el DEDO QUE REGISTRO sobre el capta huella:<br>* Realize LEVE PRESION firmemente.<br>* La yema debe colocarse completa.<br>"
    Endif
    If LineasProcesamiento.Count > 4 Then
        If Val(verificado) == -5 Then
            FMain.mensageusuario.Text = "Ud esta en nomina, pero no ha registrado su huella dactilar aun\n, favor comuniquese con su jefe inmediato en RRHH o con Sistemas"
        Endif
    Endif
    FMain.mensageusuario.Show
    FMain.mensageusuario.Visible = True
    'un print de log alli y listo
    Print "proceso de enrolado termino con resultqado : " & verificado
    ' eliminamos rastro, dado ya tenemos la foto dactilar y el archivo, incluso encriptado
    Try Kill ruta_img_foto
    Try Kill ruta_img_huella
    Try Kill ruta_data_dactilar
    Return

End


'' configura el comando a ejecutar para escanear directorios validos son /usr/bin y /usr/local/bin, sino lo asume
Public Sub setScanerdedoCmd(command As String)
    If RInStr(command, "/usr/bin") = 1 Or RInStr(command, "/usr/local/bin") > 0 Then
        scanerdedocmd = command
    Else
        scanerdedocmd = "/usr/bin/" & command
    Endif
End

'' obtiene el comando a ejecutar para escanear
Public Sub getScanerdedoCmd() As String
    Return Mcaptura.scanerdedocmd
End

'' otorga acceso a la camara web una vez configurada por "funcionando_camara"
Public Sub getCamera() As VideoDevice
    Return Mcaptura.hWebcam
End

'' configurar si se empleara emulacion del escaner
Public Sub setModoEmulado(modo As Boolean)
    isemuladoactivo = modo
    If modo == True
    scanerdummycmd = " dummy dummysts FALSE" ' deprecated, aora el comando se autodetecta el dispositivo
    Else
    scanerdummycmd = ""
    Endif
End
'' notifica y verifica si se tiene escaner o esta en modo emulado
Public Sub itsModoEmulado() As Boolean
    Return isemuladoactivo
End

Public Sub itsCameEmulado() As Boolean
    Return isemuladocamara
End
